#include <iostream>
#include<bits/stdc++.h>
typedef struct node* Node;
using namespace std;


struct node
{
  int data1,data2,lvl;
  struct node* left;
  struct node* right;
  int visit=0;

  node(int data1,int data2,int lvl)
  {
    this->data1=data1;
    this->data2=data2;
    this->lvl=lvl;
    left=NULL;
    right=NULL;
  }
};




void bfs(Node root)
{
  
  
  queue<Node> que;
  que.push(root);
  while(!que.empty())
  {
    Node element=que.front();
    que.pop();

    cout<<element->data1<<" "<<element->data2<<endl;
    element->visit=1;
    if(element->left!=NULL)
      que.push(element->left);
    if(element->right!=NULL)
      que.push(element->right);

  }
}






int main()
{
  cout<<"enter the no. of pairs to enter "<<endl;
  int n;
  cin>>n;
  struct node* root=NULL;
  int t;



  //*********************insertion*********************8
  while(n--)
  {
    cout<<"enter the pair data1 and data2 "<<endl;
    int d1,d2;
    cin>>d1>>d2;
    if(root==NULL)
    {
      struct node* n1=new node(d1,d2,0);
      root=n1;
    }
    else
    {
      Node n=root;
      while(true)
      {
        if((n->lvl)%2==0)
        {
          if(n->data1>d1)
          {
            if(n->left==NULL){
              struct node* nn=new node(d1,d2,n->lvl+1);
              n->left=nn;
              break;
            }
            else
            {
              n=n->left;
            }

          }
          else
          {
            if(n->right==NULL){
              struct node* nn=new node(d1,d2,n->lvl+1);
              n->right=nn;
              break;
            }
            else
            {
              n=n->right;
            }
          }


        }
        else
        {
          if(n->data2>d2)
          {
            if(n->left==NULL){
              struct node* nn=new node(d1,d2,n->lvl+1);
              n->left=nn;
              break;
            }
            else
            {
              n=n->left;
            }

          }
          else
          {
            if(n->right==NULL){
              struct node* nn=new node(d1,d2,n->lvl+1);
              n->right=nn;
              break;
            }
            else
            {
              n=n->right;
            }
          }
        }


        
      }
    }

  }
  cout<<endl<<"**************bfs of tree**************"<<endl;
  bfs(root);



}
/*
  6
  30 40
  5 25
  10 12
  70 70
  50 30
  35 45

*/
